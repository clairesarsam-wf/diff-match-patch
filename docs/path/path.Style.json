{"name":"Style","qualifiedName":"path/path.Style","comment":"<p>An enum type describing a \"flavor\" of path.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"platform":{"name":"platform","qualifiedName":"path/path.Style.platform","comment":"<p>The style of the host platform.</p>\n<p>When running on the command line, this will be <a>path/path.Style.windows</a> or <a>path/path.Style.posix</a> based\non the host operating system. On a browser, this will be <a>path/path.Style.url</a>.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"posix":{"name":"posix","qualifiedName":"path/path.Style.posix","comment":"<p>POSIX-style paths use \"/\" (forward slash) as separators. Absolute paths\nstart with \"/\". Used by UNIX, Linux, Mac OS X, and others.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"url":{"name":"url","qualifiedName":"path/path.Style.url","comment":"<p>URLs aren't filesystem paths, but they're supported to make it easier to\nmanipulate URL paths in the browser.</p>\n<p>URLs use \"/\" (forward slash) as separators. Absolute paths either start\nwith a protocol and optional hostname (e.g. <code>http://dartlang.org</code>,\n<code>file://</code>) or with \"/\".</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"windows":{"name":"windows","qualifiedName":"path/path.Style.windows","comment":"<p>Windows paths use \"\\\" (backslash) as separators. Absolute paths start with\na drive letter followed by a colon (example, \"C:\") or two backslashes\n(\"\\\\\") for UNC paths.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"context":{"name":"context","qualifiedName":"path/path.Style.context","comment":"<p>A <a>path/path.Context</a> that uses this style.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"path/path.Context","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"path/path.Style.name","comment":"<p>The name of this path style. Will be \"posix\" or \"windows\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"needsSeparatorPattern":{"name":"needsSeparatorPattern","qualifiedName":"path/path.Style.needsSeparatorPattern","comment":"","commentFrom":"path.Style.needsSeparatorPattern","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Pattern","inner":[]}],"parameters":{},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most Style members will be removed in path 2.0.\""]}]},"relativeRootPattern":{"name":"relativeRootPattern","qualifiedName":"path/path.Style.relativeRootPattern","comment":"","commentFrom":"path.Style.relativeRootPattern","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Pattern","inner":[]}],"parameters":{},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most Style members will be removed in path 2.0.\""]}]},"rootPattern":{"name":"rootPattern","qualifiedName":"path/path.Style.rootPattern","comment":"","commentFrom":"path.Style.rootPattern","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Pattern","inner":[]}],"parameters":{},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most Style members will be removed in path 2.0.\""]}]},"separator":{"name":"separator","qualifiedName":"path/path.Style.separator","comment":"","commentFrom":"path.Style.separator","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most Style members will be removed in path 2.0.\""]}]},"separatorPattern":{"name":"separatorPattern","qualifiedName":"path/path.Style.separatorPattern","comment":"","commentFrom":"path.Style.separatorPattern","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Pattern","inner":[]}],"parameters":{},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most Style members will be removed in path 2.0.\""]}]}},"constructors":{},"operators":{},"methods":{"absolutePathToUri":{"name":"absolutePathToUri","qualifiedName":"path/path.Style.absolutePathToUri","comment":"","commentFrom":"path.Style.absolutePathToUri","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most style members will be removed in path 2.0.\""]}]},"getRelativeRoot":{"name":"getRelativeRoot","qualifiedName":"path/path.Style.getRelativeRoot","comment":"","commentFrom":"path.Style.getRelativeRoot","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most style members will be removed in path 2.0.\""]}]},"getRoot":{"name":"getRoot","qualifiedName":"path/path.Style.getRoot","comment":"","commentFrom":"path.Style.getRoot","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most style members will be removed in path 2.0.\""]}]},"pathFromUri":{"name":"pathFromUri","qualifiedName":"path/path.Style.pathFromUri","comment":"","commentFrom":"path.Style.pathFromUri","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most style members will be removed in path 2.0.\""]}]},"relativePathToUri":{"name":"relativePathToUri","qualifiedName":"path/path.Style.relativePathToUri","comment":"","commentFrom":"path.Style.relativePathToUri","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"path/dart-core.Deprecated","parameters":["\"Most style members will be removed in path 2.0.\""]}]},"toString":{"name":"toString","qualifiedName":"path/path.Style.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"path/path.Style.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>path/path.Style.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"path/path.Style.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"path/path.Style.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>path/path.Style.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>path/path.Style.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"path/path.Style.noSuchMethod","comment":"<p><a>path/path.Style.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>path/path.Style.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>path/path.Style.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>path/path.Style.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"path/path.Style.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}
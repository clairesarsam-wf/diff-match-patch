{"name":"diff_match_patch","qualifiedName":"diff_match_patch/diff_match_patch","comment":"<p>Copyright 2011 Google Inc.\nCopyright 2014 Boris Kaul &lt;localvoid@gmail.com>\nhttp://github.com/localvoid/diff-match-patch</p>\n<p>Licensed under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<p>  http://www.apache.org/licenses/LICENSE-2.0</p>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an 'AS IS' BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>","variables":{"DIFF_DELETE":{"name":"DIFF_DELETE","qualifiedName":"diff_match_patch/diff_match_patch.DIFF_DELETE","comment":"<p>The data structure representing a diff is a List of Diff objects:\n{Diff(DIFF<em>DELETE, 'Hello'), Diff(DIFF</em>INSERT, 'Goodbye'),\n Diff(DIFF_EQUAL, ' world.')}\nwhich means: delete 'Hello', add 'Goodbye' and keep ' world.'</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"DIFF_EQUAL":{"name":"DIFF_EQUAL","qualifiedName":"diff_match_patch/diff_match_patch.DIFF_EQUAL","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"DIFF_INSERT":{"name":"DIFF_INSERT","qualifiedName":"diff_match_patch/diff_match_patch.DIFF_INSERT","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"cleanupEfficiency":{"name":"cleanupEfficiency","qualifiedName":"diff_match_patch/diff_match_patch.cleanupEfficiency","comment":"<p>Reduce the number of edits by eliminating operationally trivial equalities.\n<a>diff_match_patch/diff_match_patch.cleanupEfficiency.diffs</a> is a List of Diff objects.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"diffs":{"name":"diffs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Diff","inner":[]}]}],"value":null,"annotations":[]},"diffEditCost":{"name":"diffEditCost","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"cleanupSemantic":{"name":"cleanupSemantic","qualifiedName":"diff_match_patch/diff_match_patch.cleanupSemantic","comment":"<p>Reduce the number of edits by eliminating semantically trivial equalities.\n<a>diff_match_patch/diff_match_patch.cleanupSemantic.diffs</a> is a List of Diff objects.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"diffs":{"name":"diffs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Diff","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"diff":{"name":"diff","qualifiedName":"diff_match_patch/diff_match_patch.diff","comment":"<p>Find the differences between two texts.  Simplifies the problem by\nstripping any common prefix or suffix off the texts before diffing.\n<a>diff_match_patch/diff_match_patch.diff.text1</a> is the old string to be diffed.\n<a>diff_match_patch/diff_match_patch.diff.text2</a> is the new string to be diffed.\n<a>diff_match_patch/diff_match_patch.diff.timeout</a>  is an optional number of seconds to map a diff before giving up</p>\n<pre><code>(0 for infinity).\n</code></pre>\n<p><a>diff_match_patch/diff_match_patch.diff.checklines</a> is an optional speedup flag.  If present and false, then don't</p>\n<pre><code>run a line-level diff first to identify the changed areas.\nDefaults to true, which does a faster, slightly less optimal diff.\n</code></pre>\n<p><a>diff_match_patch/diff_match_patch.diff.deadline</a> is an optional time when the diff should be complete by.  Used</p>\n<pre><code>internally for recursive calls.  Users should set DiffTimeout instead.\n</code></pre>\n<p>Returns a List of Diff objects.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Diff","inner":[]}]}],"parameters":{"text1":{"name":"text1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"text2":{"name":"text2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"timeout":{"name":"timeout","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"1.0","annotations":[]},"checklines":{"name":"checklines","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"deadline":{"name":"deadline","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"levenshtein":{"name":"levenshtein","qualifiedName":"diff_match_patch/diff_match_patch.levenshtein","comment":"<p>Compute the Levenshtein distance; the number of inserted, deleted or\nsubstituted characters.\n<a>diff_match_patch/diff_match_patch.levenshtein.diffs</a> is a List of Diff objects.\nReturns the number of changes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"diffs":{"name":"diffs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Diff","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"match":{"name":"match","qualifiedName":"diff_match_patch/diff_match_patch.match","comment":"<p>Locate the best instance of 'pattern' in 'text' near 'loc'.\nReturns -1 if no match found.\n<a>diff_match_patch/diff_match_patch.match.text</a> is the text to search.\n<a>diff_match_patch/diff_match_patch.match.pattern</a> is the pattern to search for.\n<a>diff_match_patch/diff_match_patch.match.loc</a> is the location to search around.\n<a>diff_match_patch/diff_match_patch.match.threshold</a> At what point is no match declared (0.0 = perfection,</p>\n<pre><code>1.0 = very loose).\n</code></pre>\n<p><a>diff_match_patch/diff_match_patch.match.distance</a> How far to search for a match (0 = exact location, 1000+ = broad</p>\n<pre><code>match). A match this many characters away from the expected location will\nadd 1.0 to the score (0.0 is a perfect match).\n</code></pre>\n<p>Returns the best match index or -1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"pattern":{"name":"pattern","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"loc":{"name":"loc","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"threshold":{"name":"threshold","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"0.5","annotations":[]},"distance":{"name":"distance","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"1000","annotations":[]}},"annotations":[]},"patchApply":{"name":"patchApply","qualifiedName":"diff_match_patch/diff_match_patch.patchApply","comment":"<p>Merge a set of patches onto the text.  Return a patched text, as well\nas an array of true/false values indicating which patches were applied.\n<a>diff_match_patch/diff_match_patch.patchApply.patches</a> is a List of Patch objects\n<a>diff_match_patch/diff_match_patch.patchApply.text</a> is the old text.\nReturns a two element List, containing the new text and a List of</p>\n<pre><code> bool values.\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[]}],"parameters":{"patches":{"name":"patches","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Patch","inner":[]}]}],"value":null,"annotations":[]},"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"deleteThreshold":{"name":"deleteThreshold","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.5","annotations":[]},"diffTimeout":{"name":"diffTimeout","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"1.0","annotations":[]},"diffDeadline":{"name":"diffDeadline","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]},"matchThreshold":{"name":"matchThreshold","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.5","annotations":[]},"matchDistance":{"name":"matchDistance","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1000","annotations":[]},"margin":{"name":"margin","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"4","annotations":[]}},"annotations":[]},"patchFromText":{"name":"patchFromText","qualifiedName":"diff_match_patch/diff_match_patch.patchFromText","comment":"<p>Parse a textual representation of patches and return a List of Patch\nobjects.\n<a>diff_match_patch/diff_match_patch.patchFromText.textline</a> is a text representation of patches.\nReturns a List of Patch objects.\nThrows ArgumentError if invalid input.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Patch","inner":[]}]}],"parameters":{"textline":{"name":"textline","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"patchMake":{"name":"patchMake","qualifiedName":"diff_match_patch/diff_match_patch.patchMake","comment":"<p>Compute a list of patches to turn text1 into text2.\nUse diffs if provided, otherwise compute it ourselves.\nThere are four ways to call this function, depending on what data is\navailable to the caller:\nMethod 1:\n<a>diff_match_patch/diff_match_patch.patchMake.a</a> = text1, <a>diff_match_patch/diff_match_patch.patchMake.b</a> = text2\nMethod 2:\n<a>diff_match_patch/diff_match_patch.patchMake.a</a> = diffs\nMethod 3 (optimal):\n<a>diff_match_patch/diff_match_patch.patchMake.a</a> = text1, <a>diff_match_patch/diff_match_patch.patchMake.b</a> = diffs\nMethod 4 (deprecated, use method 3):\n<a>diff_match_patch/diff_match_patch.patchMake.a</a> = text1, <a>diff_match_patch/diff_match_patch.patchMake.b</a> = text2, <a>diff_match_patch/diff_match_patch.patchMake.c</a> = diffs\nReturns a List of Patch objects.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Patch","inner":[]}]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"c":{"name":"c","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"diffTimeout":{"name":"diffTimeout","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"1.0","annotations":[]},"diffDeadline":{"name":"diffDeadline","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]},"diffEditCost":{"name":"diffEditCost","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"4","annotations":[]},"deleteThreshold":{"name":"deleteThreshold","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.5","annotations":[]},"margin":{"name":"margin","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"4","annotations":[]}},"annotations":[]},"patchToText":{"name":"patchToText","qualifiedName":"diff_match_patch/diff_match_patch.patchToText","comment":"<p>Take a list of patches and return a textual representation.\n<a>diff_match_patch/diff_match_patch.patchToText.patches</a> is a List of Patch objects.\nReturns a text representation of patches.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"patches":{"name":"patches","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"diff_match_patch/diff_match_patch.Patch","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Diff","qualifiedName":"diff_match_patch/diff_match_patch.Diff","preview":"<p>Class representing one diff operation.</p>"},{"name":"DiffMatchPatch","qualifiedName":"diff_match_patch/diff_match_patch.DiffMatchPatch","preview":"<p>Class containing the diff, match and patch methods.\nAlso contains the behaviour settings.</p>"},{"name":"Patch","qualifiedName":"diff_match_patch/diff_match_patch.Patch","preview":"<p>Class representing one patch operation.</p>"}],"typedef":{},"error":[]},"packageName":"diff_match_patch","packageIntro":"<h1>Diff Match Patch</h1>\n<p>This is a port of <a href=\"https://code.google.com/p/google-diff-match-patch/\">google-diff-match-patch</a>\nlibrary to Dart.</p>\n<h2>Algorithms</h2>\n<p>This library implements Myer's diff algorithm which is generally considered to\nbe the best general-purpose diff. A layer of pre-diff speedups and post-diff\ncleanups surround the diff algorithm, improving both performance and output\nquality.</p>\n<p>This library also implements a Bitap matching algorithm at the heart of a\nflexible matching and patching strategy.</p>"}